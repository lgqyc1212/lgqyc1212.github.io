<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2019/09/21/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      <categories>
        <category>美好</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>jQuery的ajax链式编程方法</title>
    <url>/2019/03/08/Vue%E4%BC%A0%E5%80%BC--%E4%B8%89%E7%A7%8D%E5%B8%B8%E7%94%A8/</url>
    <content><![CDATA[<h1 id="Vue传值总结"><a href="#Vue传值总结" class="headerlink" title="Vue传值总结"></a>Vue传值总结</h1><p>常见的三种方法：</p>
<p>自学的快乐，嘻嘻🤭。</p>
<h2 id="父组件传值给子组件"><a href="#父组件传值给子组件" class="headerlink" title="父组件传值给子组件"></a>父组件传值给子组件</h2><p><strong>首先父组件发送的形式是用bind(用缩写:)绑定值到子组件身上。然后子组件用属性props接收。</strong></p>
<p>父组件向子组件进行传值：</p>
<p>父组件:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> &lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    父组件:</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model=&quot;name&quot;&gt;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">    &lt;!-- 引入子组件 --&gt;</span><br><span class="line">    &lt;child :inputName=&quot;name&quot;&gt;&lt;/child&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import child from &apos;./child&apos;</span><br><span class="line">  export default &#123;</span><br><span class="line">    components: &#123;</span><br><span class="line">      child</span><br><span class="line">    &#125;,</span><br><span class="line">    data () &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        name: &apos;&apos;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>子组件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">     &lt;div&gt;</span><br><span class="line">       子组件:</span><br><span class="line">       &lt;span&gt;&#123;&#123;inputName&#125;&#125;&lt;/span&gt;</span><br><span class="line">     &lt;/div&gt;</span><br><span class="line">   &lt;/template&gt;</span><br><span class="line">   &lt;script&gt;</span><br><span class="line">     export default &#123;</span><br><span class="line">       // 接受父组件的值</span><br><span class="line">       props: &#123;</span><br><span class="line">         inputName: String,</span><br><span class="line">         required: true</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="子组件传值父组件"><a href="#子组件传值父组件" class="headerlink" title="子组件传值父组件"></a>子组件传值父组件</h2><p>*<em>首先是子组件发送的形式是this.$emit(事件名,需要发送的值)，<code>事件名：父组件on监听的方法</code>，父组件第一件事就是监听子组件发送过来的事件名，@事件名=获取值的方法。<code>获取值的方法（值）</code>，就这样拿到了儿子发过来的值 *</em></p>
<p>子组件向父组件传值:</p>
<p>子组件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">template&gt;</span><br><span class="line">          &lt;div&gt;</span><br><span class="line">            子组件:</span><br><span class="line">            &lt;span&gt;&#123;&#123;childValue&#125;&#125;&lt;/span&gt;</span><br><span class="line">            &lt;!-- 定义一个子组件传值的方法 --&gt;</span><br><span class="line">            &lt;input type=&quot;button&quot; value=&quot;点击触发&quot; @click=&quot;childClick&quot;&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">          export default &#123;</span><br><span class="line">            data () &#123;</span><br><span class="line">              return &#123;</span><br><span class="line">                childValue: &apos;我是子组件的数据&apos;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line">              childClick () &#123;</span><br><span class="line">                // childByValue是在父组件on监听的方法</span><br><span class="line">                // 第二个参数this.childValue是需要传的值</span><br><span class="line">                this.$emit(&apos;childByValue&apos;, this.childValue)</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>父组件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  &lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    父组件:</span><br><span class="line">    &lt;span&gt;&#123;&#123;name&#125;&#125;&lt;/span&gt;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">    &lt;!-- 引入子组件 定义一个on的方法监听子组件的状态--&gt;</span><br><span class="line">    &lt;child v-on:childByValue=&quot;childByValue&quot;&gt;&lt;/child&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import child from &apos;./child&apos;</span><br><span class="line">  export default &#123;</span><br><span class="line">    components: &#123;</span><br><span class="line">      child</span><br><span class="line">    &#125;,</span><br><span class="line">    data () &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        name: &apos;&apos;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      childByValue: function (childValue) &#123;</span><br><span class="line">        // childValue就是子组件传过来的值</span><br><span class="line">        this.name = childValue</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="兄弟传值"><a href="#兄弟传值" class="headerlink" title="兄弟传值"></a>兄弟传值</h2><p><strong>两个都要引入公共js-&gt;bus。首先是发送者，this.$emit(名字，值)。然后是接受者,this.$on(“传过来的那个名字”，函数（值）)，这里要注意的是接受者的这个监听事件应该是放在钩子mounted事件内。同时注意this指向问题。（可用封装方法）</strong></p>
<p>父组件向子组件进行传值：</p>
<p>公共bus.js</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//bus.js</span><br><span class="line">import Vue from &apos;vue&apos;</span><br><span class="line">export default new Vue()</span><br></pre></td></tr></table></figure>

<p>组件A：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    A组件:</span><br><span class="line">    &lt;span&gt;&#123;&#123;elementValue&#125;&#125;&lt;/span&gt;</span><br><span class="line">    &lt;input type=&quot;button&quot; value=&quot;点击触发&quot; @click=&quot;elementByValue&quot;&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  // 引入公共的bug，来做为中间传达的工具</span><br><span class="line">  import Bus from &apos;./bus.js&apos;</span><br><span class="line">  export default &#123;</span><br><span class="line">    data () &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        elementValue: 4</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      elementByValue: function () &#123;</span><br><span class="line">        Bus.$emit(&apos;val&apos;, this.elementValue)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>组件B：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">     &lt;div&gt;</span><br><span class="line">       B组件:</span><br><span class="line">       &lt;input type=&quot;button&quot; value=&quot;点击触发&quot; @click=&quot;getData&quot;&gt;</span><br><span class="line">       &lt;span&gt;&#123;&#123;name&#125;&#125;&lt;/span&gt;</span><br><span class="line">     &lt;/div&gt;</span><br><span class="line">   &lt;/template&gt;</span><br><span class="line">   &lt;script&gt;</span><br><span class="line">     import Bus from &apos;./bus.js&apos;</span><br><span class="line">     export default &#123;</span><br><span class="line">       data () &#123;</span><br><span class="line">         return &#123;</span><br><span class="line">           name: 0</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;,</span><br><span class="line">       mounted: function () &#123;</span><br><span class="line">         var vm = this</span><br><span class="line">         // 用$on事件来接收参数</span><br><span class="line">         Bus.$on(&apos;val&apos;, (data) =&gt; &#123;</span><br><span class="line">           console.log(data)</span><br><span class="line">           vm.name = data</span><br><span class="line">         &#125;)</span><br><span class="line">       &#125;,</span><br><span class="line">       methods: &#123;</span><br><span class="line">         getData: function () &#123;</span><br><span class="line">           this.name++</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>先这样，明日来一起学习vuex哦！</p>
]]></content>
      <categories>
        <category>美好</category>
      </categories>
      <tags>
        <tag>jq</tag>
      </tags>
  </entry>
  <entry>
    <title>手写函数防抖和函数节流</title>
    <url>/2019/01/08/%E8%8A%82%E6%B5%81%E5%92%8C%E9%98%B2%E6%8A%96/</url>
    <content><![CDATA[<p> 近几日的optionslodash安全漏洞 问题今天和大家探讨探讨函数防抖和节流：</p>
<ul>
<li>函数防抖：在规定时间内，再次执行，清除上一次执行，重新执行。<ul>
<li>lodash提供 <a href="https://www.lodashjs.com/docs/latest#debouncefunc-wait0-options" target="_blank" rel="noopener">debounce</a>  </li>
</ul>
</li>
<li>函数节流：在规定时间内，再次执行，必须等上一次执行完毕，才能执行。<ul>
<li>lodash提供 <a href="https://www.lodashjs.com/docs/latest#_throttlefunc-wait0" target="_blank" rel="noopener">throttle</a>  </li>
</ul>
</li>
<li>options<a href="https://www.infoq.cn/article/k7C-ZvXKOHh284ToEy9K" target="_blank" rel="noopener">lodash安全漏洞</a>   如果只是个别功能，建议自己实现。（有兴趣的朋友可以去看看哦）</li>
</ul>
<h2 id="手写函数防抖和函数节流"><a href="#手写函数防抖和函数节流" class="headerlink" title="手写函数防抖和函数节流"></a>手写函数防抖和函数节流</h2><h3 id="函数节流"><a href="#函数节流" class="headerlink" title="函数节流"></a>函数节流</h3><p>函数节流是让这个函数在间隔一段时间执行一次</p>
<p> 以输入框为例，假设你想查询xxxx，你想实现当我们开始输入多少秒之后，执行查询操作。（并不一定要输入完毕）</p>
<p>核心是去判断当前时间和开始时间的间隔是否到达了设置的delay值，如果到达了，就执行一次回调，没有则不执行。</p>
<h3 id="函数防抖"><a href="#函数防抖" class="headerlink" title="函数防抖"></a>函数防抖</h3><p>让这个函数在指向上一次之后过了你规定的时间在执行的一种方法；</p>
<p>核心在于每次都去clear一个延时器，然后每次执行的函数的时候，都去clear之前的延时器。只有你中断的时候，才会去执行相应回调</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">method,context</span>)</span>&#123;</span><br><span class="line">    cleatTimeout(method,tId)</span><br><span class="line">    method.tId = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        method.call(context)</span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h3><hr>
<p>节流是高频事件触发，但是n秒内会执行一次，所以节流会稀释函数的执行频率</p>
<h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><p>每次触发事件时都判断当前是否有等待执行的延时函数</p>
<h3 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h3><hr>
<p>触发高频事件后n秒内函数执行一次，如果n秒内高频事件再次被触发，则重新计算时间。（销毁定时器）</p>
<h4 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a>思路：</h4><p>每次触发事件时都取消之前的延时调用方法</p>
<h3 id="封装节流和防抖，通过第三参数来切换模式"><a href="#封装节流和防抖，通过第三参数来切换模式" class="headerlink" title="封装节流和防抖，通过第三参数来切换模式"></a>封装节流和防抖，通过第三参数来切换模式</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> throttle = <span class="function"><span class="keyword">function</span>(<span class="params">fn,delay,isDebounce</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> timer </span><br><span class="line">    <span class="keyword">let</span> lastCall = <span class="number">0</span></span><br><span class="line">    retrun <span class="function"><span class="keyword">function</span> (<span class="params">...args</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(isDebounce) &#123;</span><br><span class="line">             <span class="keyword">if</span>(timer) clearTimeout(timet)</span><br><span class="line">                timet = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                fn(...args)</span><br><span class="line">              &#125;,delay)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">const</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime()</span><br><span class="line">            <span class="keyword">if</span>(now - lastCall &lt; delay) <span class="keyword">return</span></span><br><span class="line">            lastCall = now</span><br><span class="line">            fn(...args)</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>美好</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>前后端交互方式</title>
    <url>/2019/01/08/%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="1、前后端交互的方式"><a href="#1、前后端交互的方式" class="headerlink" title="1、前后端交互的方式"></a>1、前后端交互的方式</h1><p>关于前后端交互的方式，应该是每个前端人员都应该掌握的技术，他是难点，同样也是重点。</p>
<p>交互就是很多互联网平台追求打造的一个功能状态。通过某个具有交互功能的互联网平台，让用户在上面不仅可以获得相关资讯、信息或服务，还能使用户与用户之间或用户与平台之间相互交流与互动，从而碰撞出更多的创意、思想和需求等。</p>
<p>交互 是指替换；互相；彼此。语出《京氏易传·震》：“震分阴阳，交互用事。”。。。</p>
<p>话说多了下面让开始探讨吧。</p>
<h2 id="像发送HTTP请求有很多种方法，比如："><a href="#像发送HTTP请求有很多种方法，比如：" class="headerlink" title="像发送HTTP请求有很多种方法，比如："></a>像发送HTTP请求有很多种方法，比如：</h2><ul>
<li>用form可以发送请求，但是会刷新页面或新开页面；</li>
<li>用a可以发 get请求，但是也是会刷新页面或新开窗口；</li>
<li>用img可以发get请求，但是只能以图片的形式展示；</li>
<li>用link可以发 get请求，但是只能以css、favicon的形式展示；</li>
<li>用script 可以发get请求，但是只能以脚本的形式运行</li>
</ul>
<h2 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h2><p>jsonp即”json padding“，当两个网站（如x.com访问y.com ,不同域）之间需要访问，可以通过script作用交互方式，具体过程为：</p>
<ul>
<li>请求方（<code>x.com</code>前端）定义一个发送请求成功/失败后执行的函数f（回调函数，即使用方法提供函数给对方调用）；</li>
<li>请求方动态创建script（添加到body），其src指向响应方url（<code>y.com</code>后端），同时将回调函数名作为参数传递，即<code>http://y.com?callback=f</code>;</li>
<li>响应方法接收请求，根据查询参数f和返回的数据、构造调用这函数的javaScript代码字符串，形如<code>f.call(undefined,data)</code>或<code>f(data)</code>作为响应结果返回给请求方；</li>
<li>请求方浏览器接收响应（一段js代码），被添加到body就会执行<code>f.call(undefined,data)</code>,从而获得需要的数据data；</li>
</ul>
<p>示例：JSONP请求</p>
<p>​          请求方html</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    button.addEventListener(</span><br><span class="line">        <span class="string">'click'</span>, (e) =&gt; &#123;</span><br><span class="line">            <span class="keyword">let</span> functionName = <span class="string">'x'</span> + <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random() * <span class="number">10000</span>, <span class="number">10</span>)    <span class="comment">// 随机生成回调函数名称</span></span><br><span class="line">            <span class="built_in">window</span>[functionName] = <span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (result === <span class="string">'success'</span>) &#123;</span><br><span class="line">                    <span class="comment">// ...</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">let</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>)</span><br><span class="line">            script.src = <span class="string">'http://y.com/?callback='</span> + functionName     <span class="comment">// 发送请求获取script</span></span><br><span class="line">            <span class="built_in">document</span>.body.appendChild(script)    <span class="comment">// 把script加入body中，自动执行</span></span><br><span class="line">            script.onload = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">                e.currentTarget.remove()</span><br><span class="line">                <span class="keyword">delete</span> <span class="built_in">window</span>[functionName]</span><br><span class="line">            &#125;</span><br><span class="line">            script.onerror = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">                e.currentTarget.remove()</span><br><span class="line">                <span class="keyword">delete</span> <span class="built_in">window</span>[functionName]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<p>也可以用jQuery：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    url: <span class="string">'http://y.com/?callback='</span> + functionName,</span><br><span class="line">    dataType: <span class="string">'jsonp'</span>,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(response === <span class="string">'success'</span>)&#123;</span><br><span class="line">           <span class="comment">// ...</span></span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>让我们也看看后端接口的写法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = require(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line">app.get(<span class="string">'/gettime'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  let &#123; callback &#125; = req.query;</span><br><span class="line">  let data = JSON.stringfy( &#123;a:<span class="number">1</span>,b:<span class="number">2</span>&#125; )</span><br><span class="line">  res.end(`$&#123;callback&#125;($&#123;data&#125;)`)</span><br><span class="line">&#125;)</span><br><span class="line">    </span><br><span class="line">app.listen(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">  console.log(<span class="string">'你可以通过http://localhost:3000来访问...'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>(写过node的朋友是不是很熟悉)</p>
<p>当然，后端框架中也有现成的解决方案，不要需要写的这么复杂。express框架已经提供了一个名为jsonp的方法来处理jsonp请求：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = require(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line">app.get(<span class="string">'/gettime'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  let data = &#123;a:<span class="number">1</span>,b:<span class="number">2</span>&#125;</span><br><span class="line">  res.jsonp(data)</span><br><span class="line">&#125;)</span><br><span class="line">app.listen(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">  console.log(<span class="string">'你可以通过http://localhost:3000来访问...'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>送你们一段模拟代码（手写jsonp，不用客气）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>html页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>jsonp<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>需要后端接口的配合：http://localhost:3005/jsonp<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">pre</span>&gt;</span></span><br><span class="line">        //--后端测试代码如下</span><br><span class="line">          const express = require('express');</span><br><span class="line">          const app = express()</span><br><span class="line">          </span><br><span class="line">          // 留言板接口 -- 获取所有数据</span><br><span class="line">          app.get('/jsonp', (req, res) =&gt; &#123;</span><br><span class="line">            var &#123; callback &#125; = req.query;</span><br><span class="line">          </span><br><span class="line">            res.setHeader('content-type', 'application/javascript');</span><br><span class="line">          </span><br><span class="line">            res.end(callback + '(&#123;a:1,b:2&#125;)');</span><br><span class="line">          &#125;);</span><br><span class="line">          </span><br><span class="line">          app.listen(3000,()=&gt;&#123;&#125;)</span><br><span class="line">      <span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">buildCallBackFunction</span>(<span class="params">options, callbackFunName</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>[callbackFunName] = <span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span></span><br><span class="line">          options.success(result);</span><br><span class="line"><span class="javascript">          <span class="built_in">window</span>[callbackFunName] = <span class="literal">null</span>;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">delete</span> <span class="built_in">window</span>[callbackFunName];</span></span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">buildParam</span>(<span class="params">options</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> params = options.params;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (!params) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> <span class="string">''</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (<span class="keyword">typeof</span> params === <span class="string">'object'</span>) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">var</span> arr = [];</span></span><br><span class="line"><span class="javascript">          <span class="keyword">for</span> (<span class="keyword">var</span> p <span class="keyword">in</span> params) &#123;</span></span><br><span class="line"><span class="javascript">            arr.push(<span class="string">`p=<span class="subst">$&#123;params[p]&#125;</span>`</span>);</span></span><br><span class="line">          &#125;</span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> arr.join(<span class="string">'&amp;'</span>);</span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> params === <span class="string">'string'</span>) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> params;</span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> <span class="string">''</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">        </span><br><span class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">buildScript</span>(<span class="params">url</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span></span><br><span class="line"><span class="javascript">        script.setAttribute(<span class="string">'src'</span>, url);</span></span><br><span class="line"><span class="javascript">        script.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>].removeChild(script);</span></span><br><span class="line">        &#125;;</span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>].appendChild(script);</span></span><br><span class="line">      &#125;</span><br><span class="line">        </span><br><span class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">json</span>(<span class="params">options</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> &#123; url, params, success &#125; = options;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> callbackFunName = <span class="string">'callback_'</span> + <span class="built_in">Date</span>.now();</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> params = buildParam(options);</span></span><br><span class="line"><span class="javascript">        params += !params ? <span class="string">'callback='</span> + callbackFunName : <span class="string">'&amp;callback='</span> + callbackFunName;</span></span><br><span class="line"><span class="javascript">        url += <span class="string">'?'</span> + params;</span></span><br><span class="line">        buildCallBackFunction(options, callbackFunName);</span><br><span class="line">        buildScript(url);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      json(&#123;</span><br><span class="line"><span class="javascript">        url: <span class="string">'http://localhost:3005/jsonp/jsonp'</span>,</span></span><br><span class="line"><span class="javascript">        <span class="comment">// params: 'a=1&amp;b=2',</span></span></span><br><span class="line">        params: &#123; a: 1, b: 2 &#125;,</span><br><span class="line"><span class="javascript">        success: <span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(result);</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>响应方node.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (path === <span class="string">'/'</span> &amp;&amp; method === <span class="string">'GET'</span>) &#123;</span><br><span class="line">    response.setHeader(<span class="string">'Content-Type'</span>, <span class="string">'application/javascript'</span>)</span><br><span class="line">    response.write(<span class="string">`</span></span><br><span class="line"><span class="string">        <span class="subst">$&#123;query.callback&#125;</span>.call(undefined, 'success')</span></span><br><span class="line"><span class="string">    `</span>)</span><br><span class="line">    response.end()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一些细节：</p>
<ul>
<li>除了<code>&lt;a&gt;</code>标签外，<code>&lt;script&gt;</code>（只能以脚本形式运行）、<code>&lt;img&gt;</code>（只能展示为图片）都可以用作发请求（Http Headers<code>Content-Type</code>中的<code>image/jpg</code>、<code>text/jacascript</code>);</li>
<li>发送请求、接收响应然后可以把数据填充到页面上，而不需要刷新整个页面；</li>
<li>不同网站之间script访问不受限制（防盗链除外），因此可以在页面上<code>&lt;script src=&#39;xxx&#39;&gt;&lt;/script&gt;</code>引用script并自动执行，JSON也常被用作前后端数据交互的方式；</li>
<li>请求方动态创建回调函数，名称一般使用随机数、执行后销毁、避免污染命名空间，而且执行成功/失败后会从页面上把script删除；</li>
<li>由于页面上执行的逻辑完全由请求方前端实现，响应方后端只需要写好执行回调函数的字符串（函数名称为请求参数）、填充返回的数据即可，实现了前后端解耦；</li>
<li>由于JSONP是通过动态创建的script实现的，所以只支持get请求，且只能为脚本形式运行。</li>
</ul>
<hr>
<h2 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h2><p><strong>同源策略</strong></p>
<ul>
<li>只有协议+端口+域名完全一样，浏览器才允许发送XMLHttpRequest请求（可以发送请求，但不能获取响应）；</li>
<li>CORS（Cross-Origin Resource Sharing）跨域：要发送不同源（即协议、端口号、域名中一个或多个不同）请求，需要服务端配合，在响应头中加入<code>Access-Control-Allow-Origin</code>字段、内容为请求方域名即可放行。</li>
</ul>
<p>AJXA即“Asynchronous Jacascript And XML”，以XML和json格式作前后端交互，支持发送各种HTTP请求及任何形式展示响应，这个过程：</p>
<ul>
<li>使用XMLHttpRequest发送请求</li>
<li>服务器返回XML/JSON格式字符串</li>
<li>前端JavaScript解析XML，并更新局部页面。</li>
</ul>
<p>示例（发送XMLHttpRequest请求）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">let request = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">request.open(<span class="string">'get'</span>,<span class="string">'http://x.com'</span>)</span><br><span class="line">request.onredystatechange = () =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (requset.readyState === <span class="number">4</span> &amp;&amp; request.status &gt;= <span class="number">200</span> &amp;&amp; request.status &lt; <span class="number">300</span>) &#123;</span><br><span class="line">        let string = requst.responsrText</span><br><span class="line">        let object = window.JSON.parse(string)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">requst.send()</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="xml"><a href="#xml" class="headerlink" title="xml"></a>xml</h2><p>目前已经很少用作前后端交互，前端js解析XML字符串：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">let parser = <span class="keyword">new</span> DOMParser()</span><br><span class="line">let xmlDoc = parser.parserFromString(xmlSring)</span><br><span class="line"></span><br><span class="line"><span class="comment">//然后可以使用DOM API操作XML，很麻烦</span></span><br><span class="line">xmlDoc.getElementsByTagName(<span class="string">'heading'</span>)[<span class="number">0</span>].textContent</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><p>json是一种类似JavaScript的数据格式化语言：</p>
<table>
<thead>
<tr>
<th><strong>类型</strong></th>
<th><strong>JavaScript</strong></th>
<th><strong>JSON</strong></th>
</tr>
</thead>
<tbody><tr>
<td>未定义</td>
<td><code>undefined</code></td>
<td>-</td>
</tr>
<tr>
<td>空</td>
<td><code>null</code></td>
<td><code>null</code></td>
</tr>
<tr>
<td>数组</td>
<td><code>[&#39;a&#39;,[&#39;b&#39;]]</code></td>
<td><code>[&quot;a&quot;,&quot;b&quot;]</code></td>
</tr>
<tr>
<td>函数</td>
<td><code>function(){}</code></td>
<td>-</td>
</tr>
<tr>
<td>对象</td>
<td><code>{&quot;name&quot;,&quot;lgq&quot;}</code></td>
<td><code>{&quot;name&quot;,&quot;lgq&quot;}</code></td>
</tr>
<tr>
<td>字符串</td>
<td><code>lgq</code></td>
<td><code>lgq</code></td>
</tr>
<tr>
<td>变量</td>
<td><code>var a = {}; a.self = a</code></td>
<td>-</td>
</tr>
<tr>
<td>原型链</td>
<td><code>{_proto_}</code></td>
<td>-</td>
</tr>
</tbody></table>
<p>注意json字符串的表示必须用双引号，前端js解析JSON字符串：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">let jsonObj = wiodiw,JSON.parse(jsonnString)  <span class="comment">// 返回JS对应类型的变量</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="实现AJAX"><a href="#实现AJAX" class="headerlink" title="实现AJAX"></a>实现AJAX</h2><p><strong>HTTP请求设置</strong></p>
<p>request line</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">request.open(<span class="string">'post'</span>,<span class="string">'/xxx'</span>)</span><br></pre></td></tr></table></figure>

<p>request headers</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">request.setRequestHeader(<span class="string">'Content-Type'</span>,<span class="string">'x-www-form-urlencoded'</span>)</span><br></pre></td></tr></table></figure>

<p>request  playload (get 请求默认不显示)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">request.send(<span class="string">'lgq 18'</span>)</span><br></pre></td></tr></table></figure>

<p><strong>HTTP响应读取</strong></p>
<p>request line （注意状态码不代表返回信息，即使是404也有可能带响应）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> status = request.status</span><br><span class="line"><span class="keyword">let</span> statusText = request.statusText</span><br></pre></td></tr></table></figure>

<p>response headers</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> headers = request.getAllResponseHeaders()</span><br><span class="line"><span class="keyword">let</span> contentType = request.getResponseHeader(<span class="string">'Content-Type'</span>)</span><br></pre></td></tr></table></figure>

<p>response body</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> body = request.responseText</span><br></pre></td></tr></table></figure>

<p><strong>模拟jQuery发送HTTP请求</strong></p>
<p>前面提到使用原生js自行实现jQuery：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.jQuery = <span class="function"><span class="keyword">function</span>(<span class="params">nodesOrSelector</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 判断传入的是节点还是选择器字符串，转换成统一的对象（伪数组）</span></span><br><span class="line">    <span class="keyword">let</span> nodes = &#123;&#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> nodesOrSelector === <span class="string">'string'</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> temp = <span class="built_in">document</span>.querySelectorAll(nodesOrSelector)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; temp.length; i++) &#123;</span><br><span class="line">            nodes[i] = temp[i]</span><br><span class="line">        &#125;</span><br><span class="line">        nodes.length = temp.length</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (nodesOrSelector <span class="keyword">instanceof</span> Node) &#123;</span><br><span class="line">        nodes = &#123;</span><br><span class="line">            <span class="number">0</span>: nodesOrSelector,</span><br><span class="line">            length: <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nodes</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.$ = jQuery    <span class="comment">// 起别名</span></span><br><span class="line"><span class="keyword">var</span> node = $(item)    <span class="comment">// 返回一个对象，内部封装了多个函数</span></span><br></pre></td></tr></table></figure>

<p>把AJAX封装为jQuery一个函数来调用：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.$.ajax = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> url    <span class="comment">// 接受两种形式的参数：(url, options)或(options)（options中包含url）</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">arguments</span>.length === <span class="number">1</span>) &#123;</span><br><span class="line">        url = options.url</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        url = <span class="built_in">arguments</span>[<span class="number">0</span>]</span><br><span class="line">        options = <span class="built_in">arguments</span>[<span class="number">1</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> method = options.method</span><br><span class="line">    <span class="keyword">let</span> headers = options.headers</span><br><span class="line">    <span class="keyword">let</span> body = options.body</span><br><span class="line">    <span class="keyword">let</span> success = options.success</span><br><span class="line">    <span class="keyword">let</span> fail = options.fail </span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> reqeust = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> headers) &#123;</span><br><span class="line">        request.setRequestHeader(key, headers[key])</span><br><span class="line">    &#125;</span><br><span class="line">    request.onreadystatechange = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (request.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (request.status &gt;= <span class="number">200</span> &amp;&amp; request.status &lt; <span class="number">300</span>) &#123;</span><br><span class="line">                success.call(<span class="literal">undefined</span>, request.responseText)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                fail.call(<span class="literal">undefined</span>, request)    </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    request.send(body)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">btn.addEventListener(<span class="string">'click'</span>, (e) =&gt; &#123;</span><br><span class="line">    <span class="built_in">window</span>.$.ajax(&#123;</span><br><span class="line">        url: <span class="string">'/xxx'</span>, </span><br><span class="line">        method: <span class="string">'get'</span>, </span><br><span class="line">        <span class="comment">// headers: '', </span></span><br><span class="line">        <span class="comment">// body: '', </span></span><br><span class="line">        success: <span class="function">(<span class="params">x</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(x)</span><br><span class="line">        &#125;, </span><br><span class="line">        fail: <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;    <span class="comment">// 注意箭头函数没有arguments</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用结构化参数，如果改由逐个参数传入存在问题：</span></span><br><span class="line"><span class="comment">// 封装后无法获取函数参数名称（应该传入什么？）；</span></span><br><span class="line"><span class="comment">// 没有默认参数，只能传入undefined/null占位（很难看）；</span></span><br></pre></td></tr></table></figure>

<p>依然存在问题：调用函数依然依然需要通过文档获悉参数的名称，调用不方便</p>
<p>使用Promise优化：then可以连续根据每次成功/失败处理后的结果，调用指定的函数做多次处理，而不需要把所有函数都封装在success/fail的函数中。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.$.ajax = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(    <span class="comment">// 返回Promise对象</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">arguments</span>.length === <span class="number">1</span>) &#123;</span><br><span class="line">                url = options.url</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                url = <span class="built_in">arguments</span>[<span class="number">0</span>]</span><br><span class="line">                options = <span class="built_in">arguments</span>[<span class="number">1</span>]</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">let</span> request = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">            request.open(options.method, url)</span><br><span class="line">            request.onreadystatechange = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (request.readyState === <span class="number">4</span>) &#123;    </span><br><span class="line">                    <span class="keyword">if</span> (request.status &gt;= <span class="number">200</span> &amp;&amp; request.status &lt; <span class="number">300</span>) &#123;</span><br><span class="line">                        resolve.call(<span class="literal">undefined</span>, request.responseText)   <span class="comment">// 成功：对应Promise对象的第一个函数参数</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        reject.call(<span class="literal">undefined</span>, request)    <span class="comment">// 失败：对应Promise对象的第二个函数参数</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            request.send(options.body)</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> promise = <span class="built_in">window</span>.$.ajax(&#123;</span><br><span class="line">    url: <span class="string">'/xxx'</span>,</span><br><span class="line">    method: <span class="string">'get'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">promise.then(</span><br><span class="line">    (text) =&gt; &#123;&#125;,          <span class="comment">// success</span></span><br><span class="line">    (request) =&gt; &#123;&#125;        <span class="comment">// fail</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>美好</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>jQuery的ajax链式编程方法</title>
    <url>/2018/05/08/jQuery/</url>
    <content><![CDATA[<h1 id="jQuery的ajax链式编程方法"><a href="#jQuery的ajax链式编程方法" class="headerlink" title="jQuery的ajax链式编程方法"></a>jQuery的ajax链式编程方法</h1><p>开发的过程，经常会遇到一些耗时间的操作，比如Ajax读取服务器数据（异步操作），遍历一个很大的数组（同步操作）。不管是异步操作，还是同步操作，总之就是不能立即得到结果，JS是单线程语言，不能立即得到结果，便会一直等待（阻塞）。</p>
<p>一般的做法就是用回调函数（callback），即事先定义好一个函数，js引擎不等待这些耗时操作，而是继续执行下面的代码，等这些耗时操作结束后，回来执行事先定义好的那个函数。如下面的Ajax代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    url:<span class="string">"test.html"</span>,</span><br><span class="line">    success:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"success"</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    error: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'error'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>但这样写不够强大灵活，也很啰嗦。如此，jQuery1.5版本引入Deferred功能，如处理事件回调提供了更加强大而灵活的编程模式。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$.ajax(<span class="string">"test.html"</span>)</span><br><span class="line">.done(</span><br><span class="line">   <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">"success"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">)</span><br><span class="line">.fail(</span><br><span class="line">   <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">"error"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>不就是链式调用嘛，有何优点？</p>
<p><strong>优点一：可以清晰指定多个回调函数</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fnA</span>(<span class="params"></span>)</span>&#123;...&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fnB</span>(<span class="params"></span>)</span>&#123;...&#125;</span><br><span class="line">$.ajax(<span class="string">"tesst.html"</span>).done(fnA).done(fnB);</span><br></pre></td></tr></table></figure>

<p>试想一下，如果用以前的编程模式，只能这么写：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fnA</span>(<span class="params"></span>)</span>&#123;...&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fnB</span>(<span class="params"></span>)</span>&#123;...&#125;</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">    url:<span class="string">"test.html"</span>,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        fnA();</span><br><span class="line">        fnB();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>优点二：为多个操作指定回调函数</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$.when($.ajax(<span class="string">"test1.html"</span>),$ajax(<span class="string">"text2.html"</span>))</span><br><span class="line">.done(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="string">"success"</span>)&#125;)</span><br><span class="line">.fail(fucntion()&#123;<span class="built_in">console</span>.log(<span class="string">"error"</span>)&#125;)</span><br></pre></td></tr></table></figure>

<p>用传统的编程模式，只能重复写success，error等回调了。</p>
]]></content>
      <categories>
        <category>美好</category>
      </categories>
      <tags>
        <tag>jq</tag>
      </tags>
  </entry>
  <entry>
    <title>一个web前端的小朋友</title>
    <url>/2018/01/01/%E4%BD%A0%E5%A5%BD%E4%B8%96%E7%95%8C/</url>
    <content><![CDATA[<p>我这辈子没佩服过别人，除了它！！！</p>
<p>感谢朋友，这下有自己的田地了，我会在这片土地上勤勤恳恳耕耘，努力，学习，记忆，分享</p>
<h2 id="未来如此美好，我们一起努力"><a href="#未来如此美好，我们一起努力" class="headerlink" title="未来如此美好，我们一起努力"></a>未来如此美好，我们一起努力</h2><h3 id="啦啦啦"><a href="#啦啦啦" class="headerlink" title="啦啦啦"></a>啦啦啦</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">但少闲人如吾两人者耳</span><br></pre></td></tr></table></figure>

<h3 id="Serve-you"><a href="#Serve-you" class="headerlink" title="Serve you"></a>Serve you</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">i will give you a free data</span><br></pre></td></tr></table></figure>

<p>可以来看我哦，另一面的我<a href="https://weibo.com/7292824407/profile?rightmod=1&wvr=6&mod=personinfo&sudaref=lgqyc1212.github.io&display=0&retcode=6102" target="_blank" rel="noopener">micro-blog</a></p>
<h3 id="Mutual-encouragement"><a href="#Mutual-encouragement" class="headerlink" title="Mutual encouragement"></a>Mutual encouragement</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">前方道路宽大，90后的我们在努力，web前端的历史书有我们接过书写，希望我们在前人的肩膀上，更上一层楼！！！</span><br></pre></td></tr></table></figure>

<p>一起学习<a href="https://github.com/lgqyc1212"> gitHud</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">القرآن</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
</search>
